// Code generated by "VivaceJSON"; DO NOT EDIT.


package main

import (
    "bytes"
    "io"
    "fmt"
    "strconv"
)
/*
 <Object> <String>string_t</String> :: <String>this is string</String>  <String>int_t</String> :: <Number>1024</Number>  <String>float_t</String> :: <Number>3.14</Number>  <String>bool_t</String> :: <Bool>true</Bool>  <String>obj_t</String> :: <Object> <String>foo</String> :: <String>bar</String>  <String>obj_t0</String> :: <Object></Object>  <String>obj_t2</String> :: <Object> <String>abc</String> :: <String>def</String>  <String>lemon</String> :: <String>mint</String> </Object>  <String>obj_t3</String> :: <Object> <String>int_t0</String> :: <Number>2048</Number>  <String>float_t0</String> :: <Number>0.1</Number> </Object>  <String>bool_t2</String> :: <Bool>true</Bool>  <String>obj_t4</String> :: <Object> <String>alpha</String> :: <String>beta</String>  <String>beta</String> :: <Object> <String>delta</String> :: <String>alpha</String>  <String>int_t1</String> :: <Number>256</Number> </Object>  <String>escape_string_t</String> :: <String>\n\n\n\"\"a\taa\"</String> </Object>  <String>bool_t1</String> :: <Bool>true</Bool>  <String>obj_t5</String> :: <Object></Object> </Object>  <String>bool_t0</String> :: <Bool>false</Bool>  <String>foo</String> :: <String>bar</String>  <String>obj_t0</String> :: <Object></Object>  <String>obj_t2</String> :: <Object> <String>abc</String> :: <String>def</String>  <String>lemon</String> :: <String>mint</String> </Object>  <String>obj_t3</String> :: <Object> <String>int_t0</String> :: <Number>2048</Number>  <String>float_t0</String> :: <Number>0.1</Number> </Object>  <String>bool_t2</String> :: <Bool>true</Bool>  <String>obj_t4</String> :: <Object> <String>alpha</String> :: <String>beta</String>  <String>beta</String> :: <Object> <String>delta</String> :: <String>alpha</String>  <String>int_t1</String> :: <Number>256</Number> </Object>  <String>escape_string_t</String> :: <String>\n\n\n\"\"a\taa\"</String> </Object>  <String>bool_t1</String> :: <Bool>true</Bool>  <String>alpha</String> :: <String>beta</String>  <String>beta</String> :: <Object> <String>delta</String> :: <String>alpha</String>  <String>int_t1</String> :: <Number>256</Number> </Object>  <String>escape_string_t</String> :: <String>\n\n\n\"\"a\taa\"</String> </Object> 
0 0 1172 1172 0 0
  string_t : this is string
  int_t : 1024
  float_t : 3.14
  bool_t : true
  obj_t : [[111 98 106 95 116]]
    foo : bar
    obj_t0 : [[111 98 106 95 116] [111 98 106 95 116 48]]
    obj_t2 : [[111 98 106 95 116] [111 98 106 95 116 50]]
      abc : def
      lemon : mint
    obj_t3 : [[111 98 106 95 116] [111 98 106 95 116 51]]
      int_t0 : 2048
      float_t0 : 0.1
    bool_t2 : true
    obj_t4 : [[111 98 106 95 116] [111 98 106 95 116 52]]
      alpha : beta
      beta : [[111 98 106 95 116] [111 98 106 95 116 52] [98 101 116 97]]
        delta : alpha
        int_t1 : 256
      escape_string_t : \n\n\n\"\"a\taa\"
    bool_t1 : true
    obj_t5 : [[111 98 106 95 116] [111 98 106 95 116 53]]
  bool_t0 : false
  foo : bar
  obj_t0 : [[111 98 106 95 116 48]]
  obj_t2 : [[111 98 106 95 116 50]]
    abc : def
    lemon : mint
  obj_t3 : [[111 98 106 95 116 51]]
    int_t0 : 2048
    float_t0 : 0.1
  bool_t2 : true
  obj_t4 : [[111 98 106 95 116 52]]
    alpha : beta
    beta : [[111 98 106 95 116 52] [98 101 116 97]]
      delta : alpha
      int_t1 : 256
    escape_string_t : \n\n\n\"\"a\taa\"
  bool_t1 : true
  alpha : beta
  beta : [[98 101 116 97]]
    delta : alpha
    int_t1 : 256
  escape_string_t : \n\n\n\"\"a\taa\"
Field(KeyPath=[], Key=[string_t], Type=[String])
Field(KeyPath=[], Key=[int_t], Type=[Int])
Field(KeyPath=[], Key=[float_t], Type=[Float])
Field(KeyPath=[], Key=[bool_t], Type=[Bool])
Field(KeyPath=[obj_t], Key=[foo], Type=[String])
Field(KeyPath=[obj_t > obj_t2], Key=[abc], Type=[String])
Field(KeyPath=[obj_t > obj_t2], Key=[lemon], Type=[String])
Field(KeyPath=[obj_t > obj_t3], Key=[int_t0], Type=[Int])
Field(KeyPath=[obj_t > obj_t3], Key=[float_t0], Type=[Float])
Field(KeyPath=[obj_t], Key=[bool_t2], Type=[Bool])
Field(KeyPath=[obj_t > obj_t4], Key=[alpha], Type=[String])
Field(KeyPath=[obj_t > obj_t4 > beta], Key=[delta], Type=[String])
Field(KeyPath=[obj_t > obj_t4 > beta], Key=[int_t1], Type=[Int])
Field(KeyPath=[obj_t > obj_t4], Key=[escape_string_t], Type=[String])
Field(KeyPath=[obj_t], Key=[bool_t1], Type=[Bool])
Field(KeyPath=[], Key=[bool_t0], Type=[Bool])
Field(KeyPath=[], Key=[foo], Type=[String])
Field(KeyPath=[obj_t2], Key=[abc], Type=[String])
Field(KeyPath=[obj_t2], Key=[lemon], Type=[String])
Field(KeyPath=[obj_t3], Key=[int_t0], Type=[Int])
Field(KeyPath=[obj_t3], Key=[float_t0], Type=[Float])
Field(KeyPath=[], Key=[bool_t2], Type=[Bool])
Field(KeyPath=[obj_t4], Key=[alpha], Type=[String])
Field(KeyPath=[obj_t4 > beta], Key=[delta], Type=[String])
Field(KeyPath=[obj_t4 > beta], Key=[int_t1], Type=[Int])
Field(KeyPath=[obj_t4], Key=[escape_string_t], Type=[String])
Field(KeyPath=[], Key=[bool_t1], Type=[Bool])
Field(KeyPath=[], Key=[alpha], Type=[String])
Field(KeyPath=[beta], Key=[delta], Type=[String])
Field(KeyPath=[beta], Key=[int_t1], Type=[Int])
Field(KeyPath=[], Key=[escape_string_t], Type=[String])
*/



func (obj ExamplesrefjsonrefjsonOOGNTX2B) pack(w io.Writer) {
	w.Write(JSON_TOKEN_OPEN)

	// Field(KeyPath=[], Key=[obj_t], Type=[Object])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{111, 98, 106, 95, 116}) //obj_t
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	obj.ObjtSCA3VMUZ.pack(w)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[], Key=[obj_t2], Type=[Object])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{111, 98, 106, 95, 116, 50}) //obj_t2
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	obj.ObjtNGTYENNZ.pack(w)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[], Key=[obj_t3], Type=[Object])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{111, 98, 106, 95, 116, 51}) //obj_t3
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	obj.ObjtIMXYPXTM.pack(w)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[], Key=[string_t], Type=[String])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{115, 116, 114, 105, 110, 103, 95, 116}) //string_t
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	w.Write(JSON_TOKEN_STRING)
	escapeStr(w, obj.StringtKJVFXNQP)
	w.Write(JSON_TOKEN_STRING)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[], Key=[int_t], Type=[Int])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{105, 110, 116, 95, 116}) //int_t
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	InttESAYQXOJ_s := strconv.Itoa(obj.InttESAYQXOJ)
	writeStr(w, InttESAYQXOJ_s)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[], Key=[float_t], Type=[Float])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{102, 108, 111, 97, 116, 95, 116}) //float_t
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	fmt.Fprintf(w, "%f", obj.FloattNDJR3LLH)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[], Key=[bool_t], Type=[Bool])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{98, 111, 111, 108, 95, 116}) //bool_t
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	if obj.BooltO5EIGOAU {
		w.Write(JSON_BOOL_TRUE)
	} else {
		w.Write(JSON_BOOL_FALSE)
	}

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[], Key=[bool_t0], Type=[Bool])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{98, 111, 111, 108, 95, 116, 48}) //bool_t0
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	if obj.BooltN4U4T2TN {
		w.Write(JSON_BOOL_TRUE)
	} else {
		w.Write(JSON_BOOL_FALSE)
	}

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[], Key=[foo], Type=[String])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{102, 111, 111}) //foo
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	w.Write(JSON_TOKEN_STRING)
	escapeStr(w, obj.FooFQTLI23I)
	w.Write(JSON_TOKEN_STRING)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[], Key=[bool_t2], Type=[Bool])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{98, 111, 111, 108, 95, 116, 50}) //bool_t2
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	if obj.BooltBSAVIV66 {
		w.Write(JSON_BOOL_TRUE)
	} else {
		w.Write(JSON_BOOL_FALSE)
	}

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[], Key=[bool_t1], Type=[Bool])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{98, 111, 111, 108, 95, 116, 49}) //bool_t1
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	if obj.BooltCW3QOV5W {
		w.Write(JSON_BOOL_TRUE)
	} else {
		w.Write(JSON_BOOL_FALSE)
	}

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[], Key=[alpha], Type=[String])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{97, 108, 112, 104, 97}) //alpha
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	w.Write(JSON_TOKEN_STRING)
	escapeStr(w, obj.AlphaR3J7NLLI)
	w.Write(JSON_TOKEN_STRING)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[], Key=[escape_string_t], Type=[String])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{101, 115, 99, 97, 112, 101, 95, 115, 116, 114, 105, 110, 103, 95, 116}) //escape_string_t
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	w.Write(JSON_TOKEN_STRING)
	escapeStr(w, obj.EscapestringtD6MRMKVB)
	w.Write(JSON_TOKEN_STRING)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[], Key=[obj_t4], Type=[Object])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{111, 98, 106, 95, 116, 52}) //obj_t4
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	obj.Objt7MOZGQGZ.pack(w)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[], Key=[beta], Type=[Object])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{98, 101, 116, 97}) //beta
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	obj.Beta6RHGJZ27.pack(w)

	w.Write(JSON_TOKEN_CLOSE)
}

func (obj ExamplesrefjsonrefjsonOOGNTX2B) Marshal() []byte {
	buf := new(bytes.Buffer)
	obj.pack(buf)
	return buf.Bytes()
}
type ExamplesrefjsonrefjsonOOGNTX2B struct {
	// Field(KeyPath=[], Key=[obj_t], Type=[Object])
	// Field(KeyPath=[], Key=[obj_t2], Type=[Object])
	// Field(KeyPath=[], Key=[obj_t3], Type=[Object])
	// Field(KeyPath=[], Key=[string_t], Type=[String])
	// Field(KeyPath=[], Key=[int_t], Type=[Int])
	// Field(KeyPath=[], Key=[float_t], Type=[Float])
	// Field(KeyPath=[], Key=[bool_t], Type=[Bool])
	// Field(KeyPath=[], Key=[bool_t0], Type=[Bool])
	// Field(KeyPath=[], Key=[foo], Type=[String])
	// Field(KeyPath=[], Key=[bool_t2], Type=[Bool])
	// Field(KeyPath=[], Key=[bool_t1], Type=[Bool])
	// Field(KeyPath=[], Key=[alpha], Type=[String])
	// Field(KeyPath=[], Key=[escape_string_t], Type=[String])
	// Field(KeyPath=[], Key=[obj_t4], Type=[Object])
	// Field(KeyPath=[], Key=[beta], Type=[Object])

	ObjtSCA3VMUZ          ObjtD6YGBJP3 `json:"obj_t"`
	ObjtNGTYENNZ          ObjtGWG4J47E `json:"obj_t2"`
	ObjtIMXYPXTM          ObjtV4N27AQH `json:"obj_t3"`
	StringtKJVFXNQP       string       `json:"string_t"`
	InttESAYQXOJ          int          `json:"int_t"`
	FloattNDJR3LLH        float64      `json:"float_t"`
	BooltO5EIGOAU         bool         `json:"bool_t"`
	BooltN4U4T2TN         bool         `json:"bool_t0"`
	FooFQTLI23I           string       `json:"foo"`
	BooltBSAVIV66         bool         `json:"bool_t2"`
	BooltCW3QOV5W         bool         `json:"bool_t1"`
	AlphaR3J7NLLI         string       `json:"alpha"`
	EscapestringtD6MRMKVB string       `json:"escape_string_t"`
	Objt7MOZGQGZ          ObjtOLBDHOP4 `json:"obj_t4"`
	Beta6RHGJZ27          BetaK26ALX7I `json:"beta"`
}



func (obj ObjtD6YGBJP3) pack(w io.Writer) {
	w.Write(JSON_TOKEN_OPEN)

	// Field(KeyPath=[obj_t], Key=[obj_t4], Type=[Object])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{111, 98, 106, 95, 116, 52}) //obj_t4
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	obj.ObjtMSNUS234.pack(w)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[obj_t], Key=[foo], Type=[String])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{102, 111, 111}) //foo
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	w.Write(JSON_TOKEN_STRING)
	escapeStr(w, obj.Foo63OIHM6N)
	w.Write(JSON_TOKEN_STRING)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[obj_t], Key=[bool_t2], Type=[Bool])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{98, 111, 111, 108, 95, 116, 50}) //bool_t2
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	if obj.BooltK3OAI2UC {
		w.Write(JSON_BOOL_TRUE)
	} else {
		w.Write(JSON_BOOL_FALSE)
	}

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[obj_t], Key=[bool_t1], Type=[Bool])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{98, 111, 111, 108, 95, 116, 49}) //bool_t1
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	if obj.Boolt3K3L6ATQ {
		w.Write(JSON_BOOL_TRUE)
	} else {
		w.Write(JSON_BOOL_FALSE)
	}

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[obj_t], Key=[obj_t2], Type=[Object])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{111, 98, 106, 95, 116, 50}) //obj_t2
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	obj.Objt5GSIG2DL.pack(w)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[obj_t], Key=[obj_t3], Type=[Object])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{111, 98, 106, 95, 116, 51}) //obj_t3
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	obj.Objt2XEWC4EQ.pack(w)

	w.Write(JSON_TOKEN_CLOSE)
}

func (obj ObjtD6YGBJP3) Marshal() []byte {
	buf := new(bytes.Buffer)
	obj.pack(buf)
	return buf.Bytes()
}
type ObjtD6YGBJP3 struct {
	// Field(KeyPath=[obj_t], Key=[obj_t4], Type=[Object])
	// Field(KeyPath=[obj_t], Key=[foo], Type=[String])
	// Field(KeyPath=[obj_t], Key=[bool_t2], Type=[Bool])
	// Field(KeyPath=[obj_t], Key=[bool_t1], Type=[Bool])
	// Field(KeyPath=[obj_t], Key=[obj_t2], Type=[Object])
	// Field(KeyPath=[obj_t], Key=[obj_t3], Type=[Object])

	ObjtMSNUS234  ObjtHL2HEHYE `json:"obj_t4"`
	Foo63OIHM6N   string       `json:"foo"`
	BooltK3OAI2UC bool         `json:"bool_t2"`
	Boolt3K3L6ATQ bool         `json:"bool_t1"`
	Objt5GSIG2DL  ObjtY5YGJJNW `json:"obj_t2"`
	Objt2XEWC4EQ  ObjtFLXKGTGR `json:"obj_t3"`
}



func (obj ObjtHL2HEHYE) pack(w io.Writer) {
	w.Write(JSON_TOKEN_OPEN)

	// Field(KeyPath=[obj_t > obj_t4], Key=[beta], Type=[Object])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{98, 101, 116, 97}) //beta
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	obj.Beta2LUXNN67.pack(w)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[obj_t > obj_t4], Key=[alpha], Type=[String])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{97, 108, 112, 104, 97}) //alpha
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	w.Write(JSON_TOKEN_STRING)
	escapeStr(w, obj.AlphaOXOKS46P)
	w.Write(JSON_TOKEN_STRING)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[obj_t > obj_t4], Key=[escape_string_t], Type=[String])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{101, 115, 99, 97, 112, 101, 95, 115, 116, 114, 105, 110, 103, 95, 116}) //escape_string_t
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	w.Write(JSON_TOKEN_STRING)
	escapeStr(w, obj.EscapestringtGHA5ISBS)
	w.Write(JSON_TOKEN_STRING)

	w.Write(JSON_TOKEN_CLOSE)
}

func (obj ObjtHL2HEHYE) Marshal() []byte {
	buf := new(bytes.Buffer)
	obj.pack(buf)
	return buf.Bytes()
}
type ObjtHL2HEHYE struct {
	// Field(KeyPath=[obj_t > obj_t4], Key=[beta], Type=[Object])
	// Field(KeyPath=[obj_t > obj_t4], Key=[alpha], Type=[String])
	// Field(KeyPath=[obj_t > obj_t4], Key=[escape_string_t], Type=[String])

	Beta2LUXNN67          Beta3FKW7N43 `json:"beta"`
	AlphaOXOKS46P         string       `json:"alpha"`
	EscapestringtGHA5ISBS string       `json:"escape_string_t"`
}



func (obj Beta3FKW7N43) pack(w io.Writer) {
	w.Write(JSON_TOKEN_OPEN)

	// Field(KeyPath=[obj_t > obj_t4 > beta], Key=[delta], Type=[String])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{100, 101, 108, 116, 97}) //delta
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	w.Write(JSON_TOKEN_STRING)
	escapeStr(w, obj.DeltaFUC6KEP5)
	w.Write(JSON_TOKEN_STRING)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[obj_t > obj_t4 > beta], Key=[int_t1], Type=[Int])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{105, 110, 116, 95, 116, 49}) //int_t1
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	Intt7WLCFP3F_s := strconv.Itoa(obj.Intt7WLCFP3F)
	writeStr(w, Intt7WLCFP3F_s)

	w.Write(JSON_TOKEN_CLOSE)
}

func (obj Beta3FKW7N43) Marshal() []byte {
	buf := new(bytes.Buffer)
	obj.pack(buf)
	return buf.Bytes()
}
type Beta3FKW7N43 struct {
	// Field(KeyPath=[obj_t > obj_t4 > beta], Key=[delta], Type=[String])
	// Field(KeyPath=[obj_t > obj_t4 > beta], Key=[int_t1], Type=[Int])

	DeltaFUC6KEP5 string `json:"delta"`
	Intt7WLCFP3F  int    `json:"int_t1"`
}



func (obj ObjtY5YGJJNW) pack(w io.Writer) {
	w.Write(JSON_TOKEN_OPEN)

	// Field(KeyPath=[obj_t > obj_t2], Key=[abc], Type=[String])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{97, 98, 99}) //abc
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	w.Write(JSON_TOKEN_STRING)
	escapeStr(w, obj.AbcM52GY4W7)
	w.Write(JSON_TOKEN_STRING)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[obj_t > obj_t2], Key=[lemon], Type=[String])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{108, 101, 109, 111, 110}) //lemon
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	w.Write(JSON_TOKEN_STRING)
	escapeStr(w, obj.LemonPTPTTQJH)
	w.Write(JSON_TOKEN_STRING)

	w.Write(JSON_TOKEN_CLOSE)
}

func (obj ObjtY5YGJJNW) Marshal() []byte {
	buf := new(bytes.Buffer)
	obj.pack(buf)
	return buf.Bytes()
}
type ObjtY5YGJJNW struct {
	// Field(KeyPath=[obj_t > obj_t2], Key=[abc], Type=[String])
	// Field(KeyPath=[obj_t > obj_t2], Key=[lemon], Type=[String])

	AbcM52GY4W7   string `json:"abc"`
	LemonPTPTTQJH string `json:"lemon"`
}



func (obj ObjtFLXKGTGR) pack(w io.Writer) {
	w.Write(JSON_TOKEN_OPEN)

	// Field(KeyPath=[obj_t > obj_t3], Key=[int_t0], Type=[Int])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{105, 110, 116, 95, 116, 48}) //int_t0
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	InttCFMPVSR3_s := strconv.Itoa(obj.InttCFMPVSR3)
	writeStr(w, InttCFMPVSR3_s)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[obj_t > obj_t3], Key=[float_t0], Type=[Float])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{102, 108, 111, 97, 116, 95, 116, 48}) //float_t0
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	fmt.Fprintf(w, "%f", obj.FloattS3DUOR74)

	w.Write(JSON_TOKEN_CLOSE)
}

func (obj ObjtFLXKGTGR) Marshal() []byte {
	buf := new(bytes.Buffer)
	obj.pack(buf)
	return buf.Bytes()
}
type ObjtFLXKGTGR struct {
	// Field(KeyPath=[obj_t > obj_t3], Key=[int_t0], Type=[Int])
	// Field(KeyPath=[obj_t > obj_t3], Key=[float_t0], Type=[Float])

	InttCFMPVSR3   int     `json:"int_t0"`
	FloattS3DUOR74 float64 `json:"float_t0"`
}



func (obj ObjtGWG4J47E) pack(w io.Writer) {
	w.Write(JSON_TOKEN_OPEN)

	// Field(KeyPath=[obj_t2], Key=[abc], Type=[String])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{97, 98, 99}) //abc
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	w.Write(JSON_TOKEN_STRING)
	escapeStr(w, obj.AbcALEJUDHF)
	w.Write(JSON_TOKEN_STRING)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[obj_t2], Key=[lemon], Type=[String])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{108, 101, 109, 111, 110}) //lemon
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	w.Write(JSON_TOKEN_STRING)
	escapeStr(w, obj.LemonBNXX4WMR)
	w.Write(JSON_TOKEN_STRING)

	w.Write(JSON_TOKEN_CLOSE)
}

func (obj ObjtGWG4J47E) Marshal() []byte {
	buf := new(bytes.Buffer)
	obj.pack(buf)
	return buf.Bytes()
}
type ObjtGWG4J47E struct {
	// Field(KeyPath=[obj_t2], Key=[abc], Type=[String])
	// Field(KeyPath=[obj_t2], Key=[lemon], Type=[String])

	AbcALEJUDHF   string `json:"abc"`
	LemonBNXX4WMR string `json:"lemon"`
}



func (obj ObjtV4N27AQH) pack(w io.Writer) {
	w.Write(JSON_TOKEN_OPEN)

	// Field(KeyPath=[obj_t3], Key=[int_t0], Type=[Int])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{105, 110, 116, 95, 116, 48}) //int_t0
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	InttIOHZABLS_s := strconv.Itoa(obj.InttIOHZABLS)
	writeStr(w, InttIOHZABLS_s)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[obj_t3], Key=[float_t0], Type=[Float])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{102, 108, 111, 97, 116, 95, 116, 48}) //float_t0
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	fmt.Fprintf(w, "%f", obj.FloattI6NY5ZGY)

	w.Write(JSON_TOKEN_CLOSE)
}

func (obj ObjtV4N27AQH) Marshal() []byte {
	buf := new(bytes.Buffer)
	obj.pack(buf)
	return buf.Bytes()
}
type ObjtV4N27AQH struct {
	// Field(KeyPath=[obj_t3], Key=[int_t0], Type=[Int])
	// Field(KeyPath=[obj_t3], Key=[float_t0], Type=[Float])

	InttIOHZABLS   int     `json:"int_t0"`
	FloattI6NY5ZGY float64 `json:"float_t0"`
}



func (obj ObjtOLBDHOP4) pack(w io.Writer) {
	w.Write(JSON_TOKEN_OPEN)

	// Field(KeyPath=[obj_t4], Key=[alpha], Type=[String])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{97, 108, 112, 104, 97}) //alpha
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	w.Write(JSON_TOKEN_STRING)
	escapeStr(w, obj.AlphaIJIZ2ZXR)
	w.Write(JSON_TOKEN_STRING)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[obj_t4], Key=[escape_string_t], Type=[String])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{101, 115, 99, 97, 112, 101, 95, 115, 116, 114, 105, 110, 103, 95, 116}) //escape_string_t
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	w.Write(JSON_TOKEN_STRING)
	escapeStr(w, obj.EscapestringtWYQPC32V)
	w.Write(JSON_TOKEN_STRING)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[obj_t4], Key=[beta], Type=[Object])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{98, 101, 116, 97}) //beta
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	obj.BetaIW6DCBEB.pack(w)

	w.Write(JSON_TOKEN_CLOSE)
}

func (obj ObjtOLBDHOP4) Marshal() []byte {
	buf := new(bytes.Buffer)
	obj.pack(buf)
	return buf.Bytes()
}
type ObjtOLBDHOP4 struct {
	// Field(KeyPath=[obj_t4], Key=[alpha], Type=[String])
	// Field(KeyPath=[obj_t4], Key=[escape_string_t], Type=[String])
	// Field(KeyPath=[obj_t4], Key=[beta], Type=[Object])

	AlphaIJIZ2ZXR         string       `json:"alpha"`
	EscapestringtWYQPC32V string       `json:"escape_string_t"`
	BetaIW6DCBEB          BetaO7M46NBJ `json:"beta"`
}



func (obj BetaO7M46NBJ) pack(w io.Writer) {
	w.Write(JSON_TOKEN_OPEN)

	// Field(KeyPath=[obj_t4 > beta], Key=[delta], Type=[String])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{100, 101, 108, 116, 97}) //delta
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	w.Write(JSON_TOKEN_STRING)
	escapeStr(w, obj.Delta2BP6SMAT)
	w.Write(JSON_TOKEN_STRING)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[obj_t4 > beta], Key=[int_t1], Type=[Int])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{105, 110, 116, 95, 116, 49}) //int_t1
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	InttHSHUQAIW_s := strconv.Itoa(obj.InttHSHUQAIW)
	writeStr(w, InttHSHUQAIW_s)

	w.Write(JSON_TOKEN_CLOSE)
}

func (obj BetaO7M46NBJ) Marshal() []byte {
	buf := new(bytes.Buffer)
	obj.pack(buf)
	return buf.Bytes()
}
type BetaO7M46NBJ struct {
	// Field(KeyPath=[obj_t4 > beta], Key=[delta], Type=[String])
	// Field(KeyPath=[obj_t4 > beta], Key=[int_t1], Type=[Int])

	Delta2BP6SMAT string `json:"delta"`
	InttHSHUQAIW  int    `json:"int_t1"`
}



func (obj BetaK26ALX7I) pack(w io.Writer) {
	w.Write(JSON_TOKEN_OPEN)

	// Field(KeyPath=[beta], Key=[delta], Type=[String])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{100, 101, 108, 116, 97}) //delta
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	w.Write(JSON_TOKEN_STRING)
	escapeStr(w, obj.Delta7SMF4OFE)
	w.Write(JSON_TOKEN_STRING)

	w.Write(JSON_TOKEN_SEP)

	// Field(KeyPath=[beta], Key=[int_t1], Type=[Int])
	w.Write(JSON_TOKEN_STRING)
	w.Write([]byte{105, 110, 116, 95, 116, 49}) //int_t1
	w.Write(JSON_TOKEN_STRING)
	w.Write(JSON_TOKEN_KVSEP)

	InttQDXD4F3P_s := strconv.Itoa(obj.InttQDXD4F3P)
	writeStr(w, InttQDXD4F3P_s)

	w.Write(JSON_TOKEN_CLOSE)
}

func (obj BetaK26ALX7I) Marshal() []byte {
	buf := new(bytes.Buffer)
	obj.pack(buf)
	return buf.Bytes()
}
type BetaK26ALX7I struct {
	// Field(KeyPath=[beta], Key=[delta], Type=[String])
	// Field(KeyPath=[beta], Key=[int_t1], Type=[Int])

	Delta7SMF4OFE string `json:"delta"`
	InttQDXD4F3P  int    `json:"int_t1"`
}

// {ExamplesrefjsonrefjsonOOGNTX2B ExamplesrefjsonrefjsonOOGNTX2B ExamplesrefjsonrefjsonOOGNTX2B ExamplesrefjsonrefjsonOOGNTX2B ExamplesrefjsonrefjsonOOGNTX2B [{0 [{[]  InttESAYQXOJ rawKeyInttK5PCKPBF}] [{[105 110 116 95 116] rawKeyInttK5PCKPBF}]} {2 [{[{rawKeyPathObjtVYHAWXFP 0} {rawKeyPathObjtX5RCYU2L 1}] .ObjtSCA3VMUZ.Objt2XEWC4EQ InttCFMPVSR3 rawKeyInttWTIK3VJJ} {[{rawKeyPathObjtJQMHAYSR 0} {rawKeyPathBetaTF7BXNRE 1}] .Objt7MOZGQGZ.BetaIW6DCBEB InttHSHUQAIW rawKeyInttYXXRRICP}] [{[111 98 106 95 116] rawKeyPathObjtVYHAWXFP} {[111 98 106 95 116 51] rawKeyPathObjtX5RCYU2L} {[105 110 116 95 116 48] rawKeyInttWTIK3VJJ} {[105 110 116 95 116 49] rawKeyInttYXXRRICP}]} {3 [{[{rawKeyPathObjtYCRRIKP3 0} {rawKeyPathObjtRU7NY3AW 1} {rawKeyPathBeta35CU66WA 2}] .ObjtSCA3VMUZ.ObjtMSNUS234.Beta2LUXNN67 Intt7WLCFP3F rawKeyIntt2E7WEG6H}] [{[105 110 116 95 116 49] rawKeyIntt2E7WEG6H}]} {1 [{[{rawKeyPathObjtY6YM47D2 0}] .ObjtIMXYPXTM InttIOHZABLS rawKeyIntt5FVORX5J} {[{rawKeyPathBetaPVMY5CWB 0}] .Beta6RHGJZ27 InttQDXD4F3P rawKeyIntt3OA4VVXW}] [{[111 98 106 95 116 51] rawKeyPathObjtY6YM47D2} {[105 110 116 95 116 48] rawKeyIntt5FVORX5J} {[105 110 116 95 116 49] rawKeyIntt3OA4VVXW}]}] [{0 [{[]  FloattNDJR3LLH rawKeyFloatt6FQKJ3CE}] [{[102 108 111 97 116 95 116] rawKeyFloatt6FQKJ3CE}]} {2 [{[{rawKeyPathObjtVYHAWXFP 0} {rawKeyPathObjtX5RCYU2L 1}] .ObjtSCA3VMUZ.Objt2XEWC4EQ FloattS3DUOR74 rawKeyFloatt3UISF55R}] [{[102 108 111 97 116 95 116 48] rawKeyFloatt3UISF55R}]} {1 [{[{rawKeyPathObjtY6YM47D2 0}] .ObjtIMXYPXTM FloattI6NY5ZGY rawKeyFloattGHYXKMNW}] [{[102 108 111 97 116 95 116 48] rawKeyFloattGHYXKMNW}]}] [{0 [{[]  BooltO5EIGOAU rawKeyBoolt5PN6O537} {[]  BooltN4U4T2TN rawKeyBooltRIIBGP4U} {[]  BooltBSAVIV66 rawKeyBooltBO4BQXBY} {[]  BooltCW3QOV5W rawKeyBooltPNPOR645}] [{[98 111 111 108 95 116] rawKeyBoolt5PN6O537} {[98 111 111 108 95 116 48] rawKeyBooltRIIBGP4U} {[98 111 111 108 95 116 50] rawKeyBooltBO4BQXBY} {[98 111 111 108 95 116 49] rawKeyBooltPNPOR645}]} {1 [{[{rawKeyPathObjtTVYYPODH 0}] .ObjtSCA3VMUZ BooltK3OAI2UC rawKeyBooltEVJUTHLT} {[{rawKeyPathObjtTVYYPODH 0}] .ObjtSCA3VMUZ Boolt3K3L6ATQ rawKeyBoolt55JSY6AS}] [{[98 111 111 108 95 116 50] rawKeyBooltEVJUTHLT} {[98 111 111 108 95 116 49] rawKeyBoolt55JSY6AS}]}] [{1 [{[{rawKeyPathObjtTVYYPODH 0}] .ObjtSCA3VMUZ Foo63OIHM6N rawKeyFooLB7MSJC4} {[{rawKeyPathObjtFQ7NAMEW 0}] .ObjtNGTYENNZ AbcALEJUDHF rawKeyAbcGTY33LS5} {[{rawKeyPathObjtFQ7NAMEW 0}] .ObjtNGTYENNZ LemonBNXX4WMR rawKeyLemonFBM23DTJ} {[{rawKeyPathObjtKRRUMBDP 0}] .Objt7MOZGQGZ AlphaIJIZ2ZXR rawKeyAlphaYEDU2GJK} {[{rawKeyPathObjtKRRUMBDP 0}] .Objt7MOZGQGZ EscapestringtWYQPC32V rawKeyEscapestringtHOZXQIMV} {[{rawKeyPathBetaPVMY5CWB 0}] .Beta6RHGJZ27 Delta7SMF4OFE rawKeyDeltaSUHSLJUZ}] [{[111 98 106 95 116] rawKeyPathObjtTVYYPODH} {[102 111 111] rawKeyFooLB7MSJC4} {[111 98 106 95 116 50] rawKeyPathObjtFQ7NAMEW} {[97 98 99] rawKeyAbcGTY33LS5} {[108 101 109 111 110] rawKeyLemonFBM23DTJ} {[111 98 106 95 116 52] rawKeyPathObjtKRRUMBDP} {[97 108 112 104 97] rawKeyAlphaYEDU2GJK} {[101 115 99 97 112 101 95 115 116 114 105 110 103 95 116] rawKeyEscapestringtHOZXQIMV} {[98 101 116 97] rawKeyPathBetaPVMY5CWB} {[100 101 108 116 97] rawKeyDeltaSUHSLJUZ}]} {2 [{[{rawKeyPathObjtIGPE4VUX 0} {rawKeyPathObjtZJDIBJZG 1}] .ObjtSCA3VMUZ.Objt5GSIG2DL AbcM52GY4W7 rawKeyAbcK25SVZ53} {[{rawKeyPathObjtIGPE4VUX 0} {rawKeyPathObjtZJDIBJZG 1}] .ObjtSCA3VMUZ.Objt5GSIG2DL LemonPTPTTQJH rawKeyLemonTFD6F54Y} {[{rawKeyPathObjtXGZ2QYFP 0} {rawKeyPathObjt5EAT6VZ7 1}] .ObjtSCA3VMUZ.ObjtMSNUS234 AlphaOXOKS46P rawKeyAlpha2N36N5YO} {[{rawKeyPathObjtXGZ2QYFP 0} {rawKeyPathObjt5EAT6VZ7 1}] .ObjtSCA3VMUZ.ObjtMSNUS234 EscapestringtGHA5ISBS rawKeyEscapestringtNETKGOMA} {[{rawKeyPathObjtJQMHAYSR 0} {rawKeyPathBetaTF7BXNRE 1}] .Objt7MOZGQGZ.BetaIW6DCBEB Delta2BP6SMAT rawKeyDeltaVKBDFTXL}] [{[111 98 106 95 116] rawKeyPathObjtIGPE4VUX} {[111 98 106 95 116 50] rawKeyPathObjtZJDIBJZG} {[97 98 99] rawKeyAbcK25SVZ53} {[108 101 109 111 110] rawKeyLemonTFD6F54Y} {[111 98 106 95 116] rawKeyPathObjtXGZ2QYFP} {[111 98 106 95 116 52] rawKeyPathObjt5EAT6VZ7} {[97 108 112 104 97] rawKeyAlpha2N36N5YO} {[101 115 99 97 112 101 95 115 116 114 105 110 103 95 116] rawKeyEscapestringtNETKGOMA} {[111 98 106 95 116 52] rawKeyPathObjtJQMHAYSR} {[98 101 116 97] rawKeyPathBetaTF7BXNRE} {[100 101 108 116 97] rawKeyDeltaVKBDFTXL}]} {3 [{[{rawKeyPathObjtYCRRIKP3 0} {rawKeyPathObjtRU7NY3AW 1} {rawKeyPathBeta35CU66WA 2}] .ObjtSCA3VMUZ.ObjtMSNUS234.Beta2LUXNN67 DeltaFUC6KEP5 rawKeyDeltaMTVP5KUA}] [{[111 98 106 95 116] rawKeyPathObjtYCRRIKP3} {[111 98 106 95 116 52] rawKeyPathObjtRU7NY3AW} {[98 101 116 97] rawKeyPathBeta35CU66WA} {[100 101 108 116 97] rawKeyDeltaMTVP5KUA}]} {0 [{[]  StringtKJVFXNQP rawKeyStringtFBJITRYQ} {[]  FooFQTLI23I rawKeyFooIEXZYHGT} {[]  AlphaR3J7NLLI rawKeyAlphaFBGNYTGE} {[]  EscapestringtD6MRMKVB rawKeyEscapestringtYS7EX4HZ}] [{[115 116 114 105 110 103 95 116] rawKeyStringtFBJITRYQ} {[102 111 111] rawKeyFooIEXZYHGT} {[97 108 112 104 97] rawKeyAlphaFBGNYTGE} {[101 115 99 97 112 101 95 115 116 114 105 110 103 95 116] rawKeyEscapestringtYS7EX4HZ}]}]}

// KeyPaths

// IntKeys

// [{[]  InttESAYQXOJ rawKeyInttK5PCKPBF}]

var rawKeyInttK5PCKPBF []byte = []byte{105, 110, 116, 95, 116}

// [{[{rawKeyPathObjtVYHAWXFP 0} {rawKeyPathObjtX5RCYU2L 1}] .ObjtSCA3VMUZ.Objt2XEWC4EQ InttCFMPVSR3 rawKeyInttWTIK3VJJ} {[{rawKeyPathObjtJQMHAYSR 0} {rawKeyPathBetaTF7BXNRE 1}] .Objt7MOZGQGZ.BetaIW6DCBEB InttHSHUQAIW rawKeyInttYXXRRICP}]

var rawKeyPathObjtVYHAWXFP []byte = []byte{111, 98, 106, 95, 116}
var rawKeyPathObjtX5RCYU2L []byte = []byte{111, 98, 106, 95, 116, 51}
var rawKeyInttWTIK3VJJ []byte = []byte{105, 110, 116, 95, 116, 48}
var rawKeyInttYXXRRICP []byte = []byte{105, 110, 116, 95, 116, 49}

// [{[{rawKeyPathObjtYCRRIKP3 0} {rawKeyPathObjtRU7NY3AW 1} {rawKeyPathBeta35CU66WA 2}] .ObjtSCA3VMUZ.ObjtMSNUS234.Beta2LUXNN67 Intt7WLCFP3F rawKeyIntt2E7WEG6H}]

var rawKeyIntt2E7WEG6H []byte = []byte{105, 110, 116, 95, 116, 49}

// [{[{rawKeyPathObjtY6YM47D2 0}] .ObjtIMXYPXTM InttIOHZABLS rawKeyIntt5FVORX5J} {[{rawKeyPathBetaPVMY5CWB 0}] .Beta6RHGJZ27 InttQDXD4F3P rawKeyIntt3OA4VVXW}]

var rawKeyPathObjtY6YM47D2 []byte = []byte{111, 98, 106, 95, 116, 51}
var rawKeyIntt5FVORX5J []byte = []byte{105, 110, 116, 95, 116, 48}
var rawKeyIntt3OA4VVXW []byte = []byte{105, 110, 116, 95, 116, 49}

// FloatKeys

// [{[]  FloattNDJR3LLH rawKeyFloatt6FQKJ3CE}]

var rawKeyFloatt6FQKJ3CE []byte = []byte{102, 108, 111, 97, 116, 95, 116}

// [{[{rawKeyPathObjtVYHAWXFP 0} {rawKeyPathObjtX5RCYU2L 1}] .ObjtSCA3VMUZ.Objt2XEWC4EQ FloattS3DUOR74 rawKeyFloatt3UISF55R}]

var rawKeyFloatt3UISF55R []byte = []byte{102, 108, 111, 97, 116, 95, 116, 48}

// [{[{rawKeyPathObjtY6YM47D2 0}] .ObjtIMXYPXTM FloattI6NY5ZGY rawKeyFloattGHYXKMNW}]

var rawKeyFloattGHYXKMNW []byte = []byte{102, 108, 111, 97, 116, 95, 116, 48}

// StringKeys

// [{[{rawKeyPathObjtTVYYPODH 0}] .ObjtSCA3VMUZ Foo63OIHM6N rawKeyFooLB7MSJC4} {[{rawKeyPathObjtFQ7NAMEW 0}] .ObjtNGTYENNZ AbcALEJUDHF rawKeyAbcGTY33LS5} {[{rawKeyPathObjtFQ7NAMEW 0}] .ObjtNGTYENNZ LemonBNXX4WMR rawKeyLemonFBM23DTJ} {[{rawKeyPathObjtKRRUMBDP 0}] .Objt7MOZGQGZ AlphaIJIZ2ZXR rawKeyAlphaYEDU2GJK} {[{rawKeyPathObjtKRRUMBDP 0}] .Objt7MOZGQGZ EscapestringtWYQPC32V rawKeyEscapestringtHOZXQIMV} {[{rawKeyPathBetaPVMY5CWB 0}] .Beta6RHGJZ27 Delta7SMF4OFE rawKeyDeltaSUHSLJUZ}]

var rawKeyPathObjtTVYYPODH []byte = []byte{111, 98, 106, 95, 116}
var rawKeyFooLB7MSJC4 []byte = []byte{102, 111, 111}
var rawKeyPathObjtFQ7NAMEW []byte = []byte{111, 98, 106, 95, 116, 50}
var rawKeyAbcGTY33LS5 []byte = []byte{97, 98, 99}
var rawKeyLemonFBM23DTJ []byte = []byte{108, 101, 109, 111, 110}
var rawKeyPathObjtKRRUMBDP []byte = []byte{111, 98, 106, 95, 116, 52}
var rawKeyAlphaYEDU2GJK []byte = []byte{97, 108, 112, 104, 97}
var rawKeyEscapestringtHOZXQIMV []byte = []byte{101, 115, 99, 97, 112, 101, 95, 115, 116, 114, 105, 110, 103, 95, 116}
var rawKeyPathBetaPVMY5CWB []byte = []byte{98, 101, 116, 97}
var rawKeyDeltaSUHSLJUZ []byte = []byte{100, 101, 108, 116, 97}

// [{[{rawKeyPathObjtIGPE4VUX 0} {rawKeyPathObjtZJDIBJZG 1}] .ObjtSCA3VMUZ.Objt5GSIG2DL AbcM52GY4W7 rawKeyAbcK25SVZ53} {[{rawKeyPathObjtIGPE4VUX 0} {rawKeyPathObjtZJDIBJZG 1}] .ObjtSCA3VMUZ.Objt5GSIG2DL LemonPTPTTQJH rawKeyLemonTFD6F54Y} {[{rawKeyPathObjtXGZ2QYFP 0} {rawKeyPathObjt5EAT6VZ7 1}] .ObjtSCA3VMUZ.ObjtMSNUS234 AlphaOXOKS46P rawKeyAlpha2N36N5YO} {[{rawKeyPathObjtXGZ2QYFP 0} {rawKeyPathObjt5EAT6VZ7 1}] .ObjtSCA3VMUZ.ObjtMSNUS234 EscapestringtGHA5ISBS rawKeyEscapestringtNETKGOMA} {[{rawKeyPathObjtJQMHAYSR 0} {rawKeyPathBetaTF7BXNRE 1}] .Objt7MOZGQGZ.BetaIW6DCBEB Delta2BP6SMAT rawKeyDeltaVKBDFTXL}]

var rawKeyPathObjtIGPE4VUX []byte = []byte{111, 98, 106, 95, 116}
var rawKeyPathObjtZJDIBJZG []byte = []byte{111, 98, 106, 95, 116, 50}
var rawKeyAbcK25SVZ53 []byte = []byte{97, 98, 99}
var rawKeyLemonTFD6F54Y []byte = []byte{108, 101, 109, 111, 110}
var rawKeyPathObjtXGZ2QYFP []byte = []byte{111, 98, 106, 95, 116}
var rawKeyPathObjt5EAT6VZ7 []byte = []byte{111, 98, 106, 95, 116, 52}
var rawKeyAlpha2N36N5YO []byte = []byte{97, 108, 112, 104, 97}
var rawKeyEscapestringtNETKGOMA []byte = []byte{101, 115, 99, 97, 112, 101, 95, 115, 116, 114, 105, 110, 103, 95, 116}
var rawKeyPathObjtJQMHAYSR []byte = []byte{111, 98, 106, 95, 116, 52}
var rawKeyPathBetaTF7BXNRE []byte = []byte{98, 101, 116, 97}
var rawKeyDeltaVKBDFTXL []byte = []byte{100, 101, 108, 116, 97}

// [{[{rawKeyPathObjtYCRRIKP3 0} {rawKeyPathObjtRU7NY3AW 1} {rawKeyPathBeta35CU66WA 2}] .ObjtSCA3VMUZ.ObjtMSNUS234.Beta2LUXNN67 DeltaFUC6KEP5 rawKeyDeltaMTVP5KUA}]

var rawKeyPathObjtYCRRIKP3 []byte = []byte{111, 98, 106, 95, 116}
var rawKeyPathObjtRU7NY3AW []byte = []byte{111, 98, 106, 95, 116, 52}
var rawKeyPathBeta35CU66WA []byte = []byte{98, 101, 116, 97}
var rawKeyDeltaMTVP5KUA []byte = []byte{100, 101, 108, 116, 97}

// [{[]  StringtKJVFXNQP rawKeyStringtFBJITRYQ} {[]  FooFQTLI23I rawKeyFooIEXZYHGT} {[]  AlphaR3J7NLLI rawKeyAlphaFBGNYTGE} {[]  EscapestringtD6MRMKVB rawKeyEscapestringtYS7EX4HZ}]

var rawKeyStringtFBJITRYQ []byte = []byte{115, 116, 114, 105, 110, 103, 95, 116}
var rawKeyFooIEXZYHGT []byte = []byte{102, 111, 111}
var rawKeyAlphaFBGNYTGE []byte = []byte{97, 108, 112, 104, 97}
var rawKeyEscapestringtYS7EX4HZ []byte = []byte{101, 115, 99, 97, 112, 101, 95, 115, 116, 114, 105, 110, 103, 95, 116}

// BoolKeys

// [{[]  BooltO5EIGOAU rawKeyBoolt5PN6O537} {[]  BooltN4U4T2TN rawKeyBooltRIIBGP4U} {[]  BooltBSAVIV66 rawKeyBooltBO4BQXBY} {[]  BooltCW3QOV5W rawKeyBooltPNPOR645}]

var rawKeyBoolt5PN6O537 []byte = []byte{98, 111, 111, 108, 95, 116}
var rawKeyBooltRIIBGP4U []byte = []byte{98, 111, 111, 108, 95, 116, 48}
var rawKeyBooltBO4BQXBY []byte = []byte{98, 111, 111, 108, 95, 116, 50}
var rawKeyBooltPNPOR645 []byte = []byte{98, 111, 111, 108, 95, 116, 49}

// [{[{rawKeyPathObjtTVYYPODH 0}] .ObjtSCA3VMUZ BooltK3OAI2UC rawKeyBooltEVJUTHLT} {[{rawKeyPathObjtTVYYPODH 0}] .ObjtSCA3VMUZ Boolt3K3L6ATQ rawKeyBoolt55JSY6AS}]

var rawKeyBooltEVJUTHLT []byte = []byte{98, 111, 111, 108, 95, 116, 50}
var rawKeyBoolt55JSY6AS []byte = []byte{98, 111, 111, 108, 95, 116, 49}

// Set Functions

func (obj *ExamplesrefjsonrefjsonOOGNTX2B) ExamplesrefjsonrefjsonOOGNTX2B_SetInt(KeyPath [][]byte, RawKey []byte, value int) {
	KeyPathlen := len(KeyPath)

	if KeyPathlen == 0 {

		// {[]  InttESAYQXOJ rawKeyInttK5PCKPBF}
		if bytes.Equal(rawKeyInttK5PCKPBF, RawKey) {
			obj.InttESAYQXOJ = value
			return
		}

		return
	}

	if KeyPathlen == 2 {

		// {[{rawKeyPathObjtVYHAWXFP 0} {rawKeyPathObjtX5RCYU2L 1}] .ObjtSCA3VMUZ.Objt2XEWC4EQ InttCFMPVSR3 rawKeyInttWTIK3VJJ}
		if bytes.Equal(rawKeyPathObjtVYHAWXFP, KeyPath[0]) && bytes.Equal(rawKeyPathObjtX5RCYU2L, KeyPath[1]) && bytes.Equal(rawKeyInttWTIK3VJJ, RawKey) {
			obj.ObjtSCA3VMUZ.Objt2XEWC4EQ.InttCFMPVSR3 = value
			return
		}

		// {[{rawKeyPathObjtJQMHAYSR 0} {rawKeyPathBetaTF7BXNRE 1}] .Objt7MOZGQGZ.BetaIW6DCBEB InttHSHUQAIW rawKeyInttYXXRRICP}
		if bytes.Equal(rawKeyPathObjtJQMHAYSR, KeyPath[0]) && bytes.Equal(rawKeyPathBetaTF7BXNRE, KeyPath[1]) && bytes.Equal(rawKeyInttYXXRRICP, RawKey) {
			obj.Objt7MOZGQGZ.BetaIW6DCBEB.InttHSHUQAIW = value
			return
		}

		return
	}

	if KeyPathlen == 3 {

		// {[{rawKeyPathObjtYCRRIKP3 0} {rawKeyPathObjtRU7NY3AW 1} {rawKeyPathBeta35CU66WA 2}] .ObjtSCA3VMUZ.ObjtMSNUS234.Beta2LUXNN67 Intt7WLCFP3F rawKeyIntt2E7WEG6H}
		if bytes.Equal(rawKeyPathObjtYCRRIKP3, KeyPath[0]) && bytes.Equal(rawKeyPathObjtRU7NY3AW, KeyPath[1]) && bytes.Equal(rawKeyPathBeta35CU66WA, KeyPath[2]) && bytes.Equal(rawKeyIntt2E7WEG6H, RawKey) {
			obj.ObjtSCA3VMUZ.ObjtMSNUS234.Beta2LUXNN67.Intt7WLCFP3F = value
			return
		}

		return
	}

	if KeyPathlen == 1 {

		// {[{rawKeyPathObjtY6YM47D2 0}] .ObjtIMXYPXTM InttIOHZABLS rawKeyIntt5FVORX5J}
		if bytes.Equal(rawKeyPathObjtY6YM47D2, KeyPath[0]) && bytes.Equal(rawKeyIntt5FVORX5J, RawKey) {
			obj.ObjtIMXYPXTM.InttIOHZABLS = value
			return
		}

		// {[{rawKeyPathBetaPVMY5CWB 0}] .Beta6RHGJZ27 InttQDXD4F3P rawKeyIntt3OA4VVXW}
		if bytes.Equal(rawKeyPathBetaPVMY5CWB, KeyPath[0]) && bytes.Equal(rawKeyIntt3OA4VVXW, RawKey) {
			obj.Beta6RHGJZ27.InttQDXD4F3P = value
			return
		}

		return
	}

}

func (obj *ExamplesrefjsonrefjsonOOGNTX2B) ExamplesrefjsonrefjsonOOGNTX2B_SetFloat(KeyPath [][]byte, RawKey []byte, value float64) {
	KeyPathlen := len(KeyPath)

	if KeyPathlen == 0 {

		// {[]  FloattNDJR3LLH rawKeyFloatt6FQKJ3CE}
		if bytes.Equal(rawKeyFloatt6FQKJ3CE, RawKey) {
			obj.FloattNDJR3LLH = value
			return
		}

		return
	}

	if KeyPathlen == 2 {

		// {[{rawKeyPathObjtVYHAWXFP 0} {rawKeyPathObjtX5RCYU2L 1}] .ObjtSCA3VMUZ.Objt2XEWC4EQ FloattS3DUOR74 rawKeyFloatt3UISF55R}
		if bytes.Equal(rawKeyPathObjtVYHAWXFP, KeyPath[0]) && bytes.Equal(rawKeyPathObjtX5RCYU2L, KeyPath[1]) && bytes.Equal(rawKeyFloatt3UISF55R, RawKey) {
			obj.ObjtSCA3VMUZ.Objt2XEWC4EQ.FloattS3DUOR74 = value
			return
		}

		return
	}

	if KeyPathlen == 1 {

		// {[{rawKeyPathObjtY6YM47D2 0}] .ObjtIMXYPXTM FloattI6NY5ZGY rawKeyFloattGHYXKMNW}
		if bytes.Equal(rawKeyPathObjtY6YM47D2, KeyPath[0]) && bytes.Equal(rawKeyFloattGHYXKMNW, RawKey) {
			obj.ObjtIMXYPXTM.FloattI6NY5ZGY = value
			return
		}

		return
	}

}

func (obj *ExamplesrefjsonrefjsonOOGNTX2B) ExamplesrefjsonrefjsonOOGNTX2B_SetString(KeyPath [][]byte, RawKey []byte, value string) {
	KeyPathlen := len(KeyPath)

	if KeyPathlen == 1 {

		// {[{rawKeyPathObjtTVYYPODH 0}] .ObjtSCA3VMUZ Foo63OIHM6N rawKeyFooLB7MSJC4}
		if bytes.Equal(rawKeyPathObjtTVYYPODH, KeyPath[0]) && bytes.Equal(rawKeyFooLB7MSJC4, RawKey) {
			obj.ObjtSCA3VMUZ.Foo63OIHM6N = value
			return
		}

		// {[{rawKeyPathObjtFQ7NAMEW 0}] .ObjtNGTYENNZ AbcALEJUDHF rawKeyAbcGTY33LS5}
		if bytes.Equal(rawKeyPathObjtFQ7NAMEW, KeyPath[0]) && bytes.Equal(rawKeyAbcGTY33LS5, RawKey) {
			obj.ObjtNGTYENNZ.AbcALEJUDHF = value
			return
		}

		// {[{rawKeyPathObjtFQ7NAMEW 0}] .ObjtNGTYENNZ LemonBNXX4WMR rawKeyLemonFBM23DTJ}
		if bytes.Equal(rawKeyPathObjtFQ7NAMEW, KeyPath[0]) && bytes.Equal(rawKeyLemonFBM23DTJ, RawKey) {
			obj.ObjtNGTYENNZ.LemonBNXX4WMR = value
			return
		}

		// {[{rawKeyPathObjtKRRUMBDP 0}] .Objt7MOZGQGZ AlphaIJIZ2ZXR rawKeyAlphaYEDU2GJK}
		if bytes.Equal(rawKeyPathObjtKRRUMBDP, KeyPath[0]) && bytes.Equal(rawKeyAlphaYEDU2GJK, RawKey) {
			obj.Objt7MOZGQGZ.AlphaIJIZ2ZXR = value
			return
		}

		// {[{rawKeyPathObjtKRRUMBDP 0}] .Objt7MOZGQGZ EscapestringtWYQPC32V rawKeyEscapestringtHOZXQIMV}
		if bytes.Equal(rawKeyPathObjtKRRUMBDP, KeyPath[0]) && bytes.Equal(rawKeyEscapestringtHOZXQIMV, RawKey) {
			obj.Objt7MOZGQGZ.EscapestringtWYQPC32V = value
			return
		}

		// {[{rawKeyPathBetaPVMY5CWB 0}] .Beta6RHGJZ27 Delta7SMF4OFE rawKeyDeltaSUHSLJUZ}
		if bytes.Equal(rawKeyPathBetaPVMY5CWB, KeyPath[0]) && bytes.Equal(rawKeyDeltaSUHSLJUZ, RawKey) {
			obj.Beta6RHGJZ27.Delta7SMF4OFE = value
			return
		}

		return
	}

	if KeyPathlen == 2 {

		// {[{rawKeyPathObjtIGPE4VUX 0} {rawKeyPathObjtZJDIBJZG 1}] .ObjtSCA3VMUZ.Objt5GSIG2DL AbcM52GY4W7 rawKeyAbcK25SVZ53}
		if bytes.Equal(rawKeyPathObjtIGPE4VUX, KeyPath[0]) && bytes.Equal(rawKeyPathObjtZJDIBJZG, KeyPath[1]) && bytes.Equal(rawKeyAbcK25SVZ53, RawKey) {
			obj.ObjtSCA3VMUZ.Objt5GSIG2DL.AbcM52GY4W7 = value
			return
		}

		// {[{rawKeyPathObjtIGPE4VUX 0} {rawKeyPathObjtZJDIBJZG 1}] .ObjtSCA3VMUZ.Objt5GSIG2DL LemonPTPTTQJH rawKeyLemonTFD6F54Y}
		if bytes.Equal(rawKeyPathObjtIGPE4VUX, KeyPath[0]) && bytes.Equal(rawKeyPathObjtZJDIBJZG, KeyPath[1]) && bytes.Equal(rawKeyLemonTFD6F54Y, RawKey) {
			obj.ObjtSCA3VMUZ.Objt5GSIG2DL.LemonPTPTTQJH = value
			return
		}

		// {[{rawKeyPathObjtXGZ2QYFP 0} {rawKeyPathObjt5EAT6VZ7 1}] .ObjtSCA3VMUZ.ObjtMSNUS234 AlphaOXOKS46P rawKeyAlpha2N36N5YO}
		if bytes.Equal(rawKeyPathObjtXGZ2QYFP, KeyPath[0]) && bytes.Equal(rawKeyPathObjt5EAT6VZ7, KeyPath[1]) && bytes.Equal(rawKeyAlpha2N36N5YO, RawKey) {
			obj.ObjtSCA3VMUZ.ObjtMSNUS234.AlphaOXOKS46P = value
			return
		}

		// {[{rawKeyPathObjtXGZ2QYFP 0} {rawKeyPathObjt5EAT6VZ7 1}] .ObjtSCA3VMUZ.ObjtMSNUS234 EscapestringtGHA5ISBS rawKeyEscapestringtNETKGOMA}
		if bytes.Equal(rawKeyPathObjtXGZ2QYFP, KeyPath[0]) && bytes.Equal(rawKeyPathObjt5EAT6VZ7, KeyPath[1]) && bytes.Equal(rawKeyEscapestringtNETKGOMA, RawKey) {
			obj.ObjtSCA3VMUZ.ObjtMSNUS234.EscapestringtGHA5ISBS = value
			return
		}

		// {[{rawKeyPathObjtJQMHAYSR 0} {rawKeyPathBetaTF7BXNRE 1}] .Objt7MOZGQGZ.BetaIW6DCBEB Delta2BP6SMAT rawKeyDeltaVKBDFTXL}
		if bytes.Equal(rawKeyPathObjtJQMHAYSR, KeyPath[0]) && bytes.Equal(rawKeyPathBetaTF7BXNRE, KeyPath[1]) && bytes.Equal(rawKeyDeltaVKBDFTXL, RawKey) {
			obj.Objt7MOZGQGZ.BetaIW6DCBEB.Delta2BP6SMAT = value
			return
		}

		return
	}

	if KeyPathlen == 3 {

		// {[{rawKeyPathObjtYCRRIKP3 0} {rawKeyPathObjtRU7NY3AW 1} {rawKeyPathBeta35CU66WA 2}] .ObjtSCA3VMUZ.ObjtMSNUS234.Beta2LUXNN67 DeltaFUC6KEP5 rawKeyDeltaMTVP5KUA}
		if bytes.Equal(rawKeyPathObjtYCRRIKP3, KeyPath[0]) && bytes.Equal(rawKeyPathObjtRU7NY3AW, KeyPath[1]) && bytes.Equal(rawKeyPathBeta35CU66WA, KeyPath[2]) && bytes.Equal(rawKeyDeltaMTVP5KUA, RawKey) {
			obj.ObjtSCA3VMUZ.ObjtMSNUS234.Beta2LUXNN67.DeltaFUC6KEP5 = value
			return
		}

		return
	}

	if KeyPathlen == 0 {

		// {[]  StringtKJVFXNQP rawKeyStringtFBJITRYQ}
		if bytes.Equal(rawKeyStringtFBJITRYQ, RawKey) {
			obj.StringtKJVFXNQP = value
			return
		}

		// {[]  FooFQTLI23I rawKeyFooIEXZYHGT}
		if bytes.Equal(rawKeyFooIEXZYHGT, RawKey) {
			obj.FooFQTLI23I = value
			return
		}

		// {[]  AlphaR3J7NLLI rawKeyAlphaFBGNYTGE}
		if bytes.Equal(rawKeyAlphaFBGNYTGE, RawKey) {
			obj.AlphaR3J7NLLI = value
			return
		}

		// {[]  EscapestringtD6MRMKVB rawKeyEscapestringtYS7EX4HZ}
		if bytes.Equal(rawKeyEscapestringtYS7EX4HZ, RawKey) {
			obj.EscapestringtD6MRMKVB = value
			return
		}

		return
	}

}

func (obj *ExamplesrefjsonrefjsonOOGNTX2B) ExamplesrefjsonrefjsonOOGNTX2B_SetBool(KeyPath [][]byte, RawKey []byte, value bool) {
	KeyPathlen := len(KeyPath)

	if KeyPathlen == 0 {

		// {[]  BooltO5EIGOAU rawKeyBoolt5PN6O537}
		if bytes.Equal(rawKeyBoolt5PN6O537, RawKey) {
			obj.BooltO5EIGOAU = value
			return
		}

		// {[]  BooltN4U4T2TN rawKeyBooltRIIBGP4U}
		if bytes.Equal(rawKeyBooltRIIBGP4U, RawKey) {
			obj.BooltN4U4T2TN = value
			return
		}

		// {[]  BooltBSAVIV66 rawKeyBooltBO4BQXBY}
		if bytes.Equal(rawKeyBooltBO4BQXBY, RawKey) {
			obj.BooltBSAVIV66 = value
			return
		}

		// {[]  BooltCW3QOV5W rawKeyBooltPNPOR645}
		if bytes.Equal(rawKeyBooltPNPOR645, RawKey) {
			obj.BooltCW3QOV5W = value
			return
		}

		return
	}

	if KeyPathlen == 1 {

		// {[{rawKeyPathObjtTVYYPODH 0}] .ObjtSCA3VMUZ BooltK3OAI2UC rawKeyBooltEVJUTHLT}
		if bytes.Equal(rawKeyPathObjtTVYYPODH, KeyPath[0]) && bytes.Equal(rawKeyBooltEVJUTHLT, RawKey) {
			obj.ObjtSCA3VMUZ.BooltK3OAI2UC = value
			return
		}

		// {[{rawKeyPathObjtTVYYPODH 0}] .ObjtSCA3VMUZ Boolt3K3L6ATQ rawKeyBoolt55JSY6AS}
		if bytes.Equal(rawKeyPathObjtTVYYPODH, KeyPath[0]) && bytes.Equal(rawKeyBoolt55JSY6AS, RawKey) {
			obj.ObjtSCA3VMUZ.Boolt3K3L6ATQ = value
			return
		}

		return
	}

}

// Get Functions

func (obj *ExamplesrefjsonrefjsonOOGNTX2B) ExamplesrefjsonrefjsonOOGNTX2B_GetInt(KeyPath [][]byte, RawKey []byte) int {
	KeyPathlen := len(KeyPath)

	if KeyPathlen == 0 {

		// {[]  InttESAYQXOJ rawKeyInttK5PCKPBF}
		if bytes.Equal(rawKeyInttK5PCKPBF, RawKey) {
			return obj.InttESAYQXOJ
		}

		return 0
	}

	if KeyPathlen == 2 {

		// {[{rawKeyPathObjtVYHAWXFP 0} {rawKeyPathObjtX5RCYU2L 1}] .ObjtSCA3VMUZ.Objt2XEWC4EQ InttCFMPVSR3 rawKeyInttWTIK3VJJ}
		if bytes.Equal(rawKeyPathObjtVYHAWXFP, KeyPath[0]) && bytes.Equal(rawKeyPathObjtX5RCYU2L, KeyPath[1]) && bytes.Equal(rawKeyInttWTIK3VJJ, RawKey) {
			return obj.ObjtSCA3VMUZ.Objt2XEWC4EQ.InttCFMPVSR3
		}

		// {[{rawKeyPathObjtJQMHAYSR 0} {rawKeyPathBetaTF7BXNRE 1}] .Objt7MOZGQGZ.BetaIW6DCBEB InttHSHUQAIW rawKeyInttYXXRRICP}
		if bytes.Equal(rawKeyPathObjtJQMHAYSR, KeyPath[0]) && bytes.Equal(rawKeyPathBetaTF7BXNRE, KeyPath[1]) && bytes.Equal(rawKeyInttYXXRRICP, RawKey) {
			return obj.Objt7MOZGQGZ.BetaIW6DCBEB.InttHSHUQAIW
		}

		return 0
	}

	if KeyPathlen == 3 {

		// {[{rawKeyPathObjtYCRRIKP3 0} {rawKeyPathObjtRU7NY3AW 1} {rawKeyPathBeta35CU66WA 2}] .ObjtSCA3VMUZ.ObjtMSNUS234.Beta2LUXNN67 Intt7WLCFP3F rawKeyIntt2E7WEG6H}
		if bytes.Equal(rawKeyPathObjtYCRRIKP3, KeyPath[0]) && bytes.Equal(rawKeyPathObjtRU7NY3AW, KeyPath[1]) && bytes.Equal(rawKeyPathBeta35CU66WA, KeyPath[2]) && bytes.Equal(rawKeyIntt2E7WEG6H, RawKey) {
			return obj.ObjtSCA3VMUZ.ObjtMSNUS234.Beta2LUXNN67.Intt7WLCFP3F
		}

		return 0
	}

	if KeyPathlen == 1 {

		// {[{rawKeyPathObjtY6YM47D2 0}] .ObjtIMXYPXTM InttIOHZABLS rawKeyIntt5FVORX5J}
		if bytes.Equal(rawKeyPathObjtY6YM47D2, KeyPath[0]) && bytes.Equal(rawKeyIntt5FVORX5J, RawKey) {
			return obj.ObjtIMXYPXTM.InttIOHZABLS
		}

		// {[{rawKeyPathBetaPVMY5CWB 0}] .Beta6RHGJZ27 InttQDXD4F3P rawKeyIntt3OA4VVXW}
		if bytes.Equal(rawKeyPathBetaPVMY5CWB, KeyPath[0]) && bytes.Equal(rawKeyIntt3OA4VVXW, RawKey) {
			return obj.Beta6RHGJZ27.InttQDXD4F3P
		}

		return 0
	}

	return 0
}

func (obj *ExamplesrefjsonrefjsonOOGNTX2B) ExamplesrefjsonrefjsonOOGNTX2B_GetFloat(KeyPath [][]byte, RawKey []byte) float64 {
	KeyPathlen := len(KeyPath)

	if KeyPathlen == 0 {

		// {[]  FloattNDJR3LLH rawKeyFloatt6FQKJ3CE}
		if bytes.Equal(rawKeyFloatt6FQKJ3CE, RawKey) {
			return obj.FloattNDJR3LLH
		}

		return 0
	}

	if KeyPathlen == 2 {

		// {[{rawKeyPathObjtVYHAWXFP 0} {rawKeyPathObjtX5RCYU2L 1}] .ObjtSCA3VMUZ.Objt2XEWC4EQ FloattS3DUOR74 rawKeyFloatt3UISF55R}
		if bytes.Equal(rawKeyPathObjtVYHAWXFP, KeyPath[0]) && bytes.Equal(rawKeyPathObjtX5RCYU2L, KeyPath[1]) && bytes.Equal(rawKeyFloatt3UISF55R, RawKey) {
			return obj.ObjtSCA3VMUZ.Objt2XEWC4EQ.FloattS3DUOR74
		}

		return 0
	}

	if KeyPathlen == 1 {

		// {[{rawKeyPathObjtY6YM47D2 0}] .ObjtIMXYPXTM FloattI6NY5ZGY rawKeyFloattGHYXKMNW}
		if bytes.Equal(rawKeyPathObjtY6YM47D2, KeyPath[0]) && bytes.Equal(rawKeyFloattGHYXKMNW, RawKey) {
			return obj.ObjtIMXYPXTM.FloattI6NY5ZGY
		}

		return 0
	}

	return 0
}

func (obj *ExamplesrefjsonrefjsonOOGNTX2B) ExamplesrefjsonrefjsonOOGNTX2B_GetString(KeyPath [][]byte, RawKey []byte) string {
	KeyPathlen := len(KeyPath)

	if KeyPathlen == 1 {

		// {[{rawKeyPathObjtTVYYPODH 0}] .ObjtSCA3VMUZ Foo63OIHM6N rawKeyFooLB7MSJC4}
		if bytes.Equal(rawKeyPathObjtTVYYPODH, KeyPath[0]) && bytes.Equal(rawKeyFooLB7MSJC4, RawKey) {
			return obj.ObjtSCA3VMUZ.Foo63OIHM6N
		}

		// {[{rawKeyPathObjtFQ7NAMEW 0}] .ObjtNGTYENNZ AbcALEJUDHF rawKeyAbcGTY33LS5}
		if bytes.Equal(rawKeyPathObjtFQ7NAMEW, KeyPath[0]) && bytes.Equal(rawKeyAbcGTY33LS5, RawKey) {
			return obj.ObjtNGTYENNZ.AbcALEJUDHF
		}

		// {[{rawKeyPathObjtFQ7NAMEW 0}] .ObjtNGTYENNZ LemonBNXX4WMR rawKeyLemonFBM23DTJ}
		if bytes.Equal(rawKeyPathObjtFQ7NAMEW, KeyPath[0]) && bytes.Equal(rawKeyLemonFBM23DTJ, RawKey) {
			return obj.ObjtNGTYENNZ.LemonBNXX4WMR
		}

		// {[{rawKeyPathObjtKRRUMBDP 0}] .Objt7MOZGQGZ AlphaIJIZ2ZXR rawKeyAlphaYEDU2GJK}
		if bytes.Equal(rawKeyPathObjtKRRUMBDP, KeyPath[0]) && bytes.Equal(rawKeyAlphaYEDU2GJK, RawKey) {
			return obj.Objt7MOZGQGZ.AlphaIJIZ2ZXR
		}

		// {[{rawKeyPathObjtKRRUMBDP 0}] .Objt7MOZGQGZ EscapestringtWYQPC32V rawKeyEscapestringtHOZXQIMV}
		if bytes.Equal(rawKeyPathObjtKRRUMBDP, KeyPath[0]) && bytes.Equal(rawKeyEscapestringtHOZXQIMV, RawKey) {
			return obj.Objt7MOZGQGZ.EscapestringtWYQPC32V
		}

		// {[{rawKeyPathBetaPVMY5CWB 0}] .Beta6RHGJZ27 Delta7SMF4OFE rawKeyDeltaSUHSLJUZ}
		if bytes.Equal(rawKeyPathBetaPVMY5CWB, KeyPath[0]) && bytes.Equal(rawKeyDeltaSUHSLJUZ, RawKey) {
			return obj.Beta6RHGJZ27.Delta7SMF4OFE
		}

		return ""
	}

	if KeyPathlen == 2 {

		// {[{rawKeyPathObjtIGPE4VUX 0} {rawKeyPathObjtZJDIBJZG 1}] .ObjtSCA3VMUZ.Objt5GSIG2DL AbcM52GY4W7 rawKeyAbcK25SVZ53}
		if bytes.Equal(rawKeyPathObjtIGPE4VUX, KeyPath[0]) && bytes.Equal(rawKeyPathObjtZJDIBJZG, KeyPath[1]) && bytes.Equal(rawKeyAbcK25SVZ53, RawKey) {
			return obj.ObjtSCA3VMUZ.Objt5GSIG2DL.AbcM52GY4W7
		}

		// {[{rawKeyPathObjtIGPE4VUX 0} {rawKeyPathObjtZJDIBJZG 1}] .ObjtSCA3VMUZ.Objt5GSIG2DL LemonPTPTTQJH rawKeyLemonTFD6F54Y}
		if bytes.Equal(rawKeyPathObjtIGPE4VUX, KeyPath[0]) && bytes.Equal(rawKeyPathObjtZJDIBJZG, KeyPath[1]) && bytes.Equal(rawKeyLemonTFD6F54Y, RawKey) {
			return obj.ObjtSCA3VMUZ.Objt5GSIG2DL.LemonPTPTTQJH
		}

		// {[{rawKeyPathObjtXGZ2QYFP 0} {rawKeyPathObjt5EAT6VZ7 1}] .ObjtSCA3VMUZ.ObjtMSNUS234 AlphaOXOKS46P rawKeyAlpha2N36N5YO}
		if bytes.Equal(rawKeyPathObjtXGZ2QYFP, KeyPath[0]) && bytes.Equal(rawKeyPathObjt5EAT6VZ7, KeyPath[1]) && bytes.Equal(rawKeyAlpha2N36N5YO, RawKey) {
			return obj.ObjtSCA3VMUZ.ObjtMSNUS234.AlphaOXOKS46P
		}

		// {[{rawKeyPathObjtXGZ2QYFP 0} {rawKeyPathObjt5EAT6VZ7 1}] .ObjtSCA3VMUZ.ObjtMSNUS234 EscapestringtGHA5ISBS rawKeyEscapestringtNETKGOMA}
		if bytes.Equal(rawKeyPathObjtXGZ2QYFP, KeyPath[0]) && bytes.Equal(rawKeyPathObjt5EAT6VZ7, KeyPath[1]) && bytes.Equal(rawKeyEscapestringtNETKGOMA, RawKey) {
			return obj.ObjtSCA3VMUZ.ObjtMSNUS234.EscapestringtGHA5ISBS
		}

		// {[{rawKeyPathObjtJQMHAYSR 0} {rawKeyPathBetaTF7BXNRE 1}] .Objt7MOZGQGZ.BetaIW6DCBEB Delta2BP6SMAT rawKeyDeltaVKBDFTXL}
		if bytes.Equal(rawKeyPathObjtJQMHAYSR, KeyPath[0]) && bytes.Equal(rawKeyPathBetaTF7BXNRE, KeyPath[1]) && bytes.Equal(rawKeyDeltaVKBDFTXL, RawKey) {
			return obj.Objt7MOZGQGZ.BetaIW6DCBEB.Delta2BP6SMAT
		}

		return ""
	}

	if KeyPathlen == 3 {

		// {[{rawKeyPathObjtYCRRIKP3 0} {rawKeyPathObjtRU7NY3AW 1} {rawKeyPathBeta35CU66WA 2}] .ObjtSCA3VMUZ.ObjtMSNUS234.Beta2LUXNN67 DeltaFUC6KEP5 rawKeyDeltaMTVP5KUA}
		if bytes.Equal(rawKeyPathObjtYCRRIKP3, KeyPath[0]) && bytes.Equal(rawKeyPathObjtRU7NY3AW, KeyPath[1]) && bytes.Equal(rawKeyPathBeta35CU66WA, KeyPath[2]) && bytes.Equal(rawKeyDeltaMTVP5KUA, RawKey) {
			return obj.ObjtSCA3VMUZ.ObjtMSNUS234.Beta2LUXNN67.DeltaFUC6KEP5
		}

		return ""
	}

	if KeyPathlen == 0 {

		// {[]  StringtKJVFXNQP rawKeyStringtFBJITRYQ}
		if bytes.Equal(rawKeyStringtFBJITRYQ, RawKey) {
			return obj.StringtKJVFXNQP
		}

		// {[]  FooFQTLI23I rawKeyFooIEXZYHGT}
		if bytes.Equal(rawKeyFooIEXZYHGT, RawKey) {
			return obj.FooFQTLI23I
		}

		// {[]  AlphaR3J7NLLI rawKeyAlphaFBGNYTGE}
		if bytes.Equal(rawKeyAlphaFBGNYTGE, RawKey) {
			return obj.AlphaR3J7NLLI
		}

		// {[]  EscapestringtD6MRMKVB rawKeyEscapestringtYS7EX4HZ}
		if bytes.Equal(rawKeyEscapestringtYS7EX4HZ, RawKey) {
			return obj.EscapestringtD6MRMKVB
		}

		return ""
	}

	return ""
}

func (obj *ExamplesrefjsonrefjsonOOGNTX2B) ExamplesrefjsonrefjsonOOGNTX2B_GetBool(KeyPath [][]byte, RawKey []byte) bool {
	KeyPathlen := len(KeyPath)

	if KeyPathlen == 0 {

		// {[]  BooltO5EIGOAU rawKeyBoolt5PN6O537}
		if bytes.Equal(rawKeyBoolt5PN6O537, RawKey) {
			return obj.BooltO5EIGOAU
		}

		// {[]  BooltN4U4T2TN rawKeyBooltRIIBGP4U}
		if bytes.Equal(rawKeyBooltRIIBGP4U, RawKey) {
			return obj.BooltN4U4T2TN
		}

		// {[]  BooltBSAVIV66 rawKeyBooltBO4BQXBY}
		if bytes.Equal(rawKeyBooltBO4BQXBY, RawKey) {
			return obj.BooltBSAVIV66
		}

		// {[]  BooltCW3QOV5W rawKeyBooltPNPOR645}
		if bytes.Equal(rawKeyBooltPNPOR645, RawKey) {
			return obj.BooltCW3QOV5W
		}

		return false
	}

	if KeyPathlen == 1 {

		// {[{rawKeyPathObjtTVYYPODH 0}] .ObjtSCA3VMUZ BooltK3OAI2UC rawKeyBooltEVJUTHLT}
		if bytes.Equal(rawKeyPathObjtTVYYPODH, KeyPath[0]) && bytes.Equal(rawKeyBooltEVJUTHLT, RawKey) {
			return obj.ObjtSCA3VMUZ.BooltK3OAI2UC
		}

		// {[{rawKeyPathObjtTVYYPODH 0}] .ObjtSCA3VMUZ Boolt3K3L6ATQ rawKeyBoolt55JSY6AS}
		if bytes.Equal(rawKeyPathObjtTVYYPODH, KeyPath[0]) && bytes.Equal(rawKeyBoolt55JSY6AS, RawKey) {
			return obj.ObjtSCA3VMUZ.Boolt3K3L6ATQ
		}

		return false
	}

	return false
}

func __dummy() {
	_ = strconv.Itoa
	_ = fmt.Fprintf
	_ = io.ReadFull
	_ = bytes.NewBuffer
}




var JSON_TOKEN_OPEN = []byte("{")
var JSON_TOKEN_CLOSE = []byte("}")
var JSON_TOKEN_SEP = []byte(", ")
var JSON_TOKEN_KVSEP = []byte(": ")
var JSON_TOKEN_STRING = []byte(`"`)

var JSON_BOOL_TRUE = []byte("true")
var JSON_BOOL_FALSE = []byte("true")

var json_double_quote = []byte(`\"`)
var json_backslash = []byte(`\\`)
var json_newline = []byte(`\n`)
var json_tab = []byte(`\t`)
var json_return = []byte(`\r`)
var json_unicode = []byte(`\u00`)

func calcString(a []byte) int {
	c := 0

	for i := range a {
		switch {
		case a[i] == '"':
			c += 2 // => \"
		case a[i] == '\\':
			c += 2 // => \\
		case a[i] == '\n':
			c += 2 // => \n
		case a[i] == '\t':
			c += 2 // => \t
		case a[i] == '\r':
			c += 2 // => \r
		case a[i] < 32:
			c += 6 // => \u00XX
		default:
			c += 1
		}
	}

	return c
}



func escapeStr(w io.Writer, input string) {
    a := []byte(input)
    
for i := range a {
		switch {
		case a[i] == '"':
			// => \"
            w.Write(json_double_quote)
		case a[i] == '\\':
			// => \\
            w.Write(json_backslash)
		case a[i] == '\n':
			// => \n
            w.Write(json_newline)
		case a[i] == '\t':
			// => \t
            w.Write(json_tab)
		case a[i] == '\r':
			// => \r
            w.Write(json_return)
		case a[i] < 32:
			// => \u00XX
			w.Write(jsonUnicodeEscapeChar[a[i]])
		case 128 <= a[i] && 160 >= a[i]:
			// => \u00XX
			w.Write(jsonUnicodeEscapeChar[a[i]])
		default:
            w.Write([]byte{a[i]})
		}
	}

}

func writeStr(w io.Writer, a string) {
	io.WriteString(w, a)
}


// {jsonUnicodeEscapeChar [[92 117 48 48 48 48] [92 117 48 48 48 49] [92 117 48 48 48 50] [92 117 48 48 48 51] [92 117 48 48 48 52] [92 117 48 48 48 53] [92 117 48 48 48 54] [92 117 48 48 48 55] [92 117 48 48 48 56] [92 117 48 48 48 57] [92 117 48 48 48 97] [92 117 48 48 48 98] [92 117 48 48 48 99] [92 117 48 48 48 100] [92 117 48 48 48 101] [92 117 48 48 48 102] [92 117 48 48 49 48] [92 117 48 48 49 49] [92 117 48 48 49 50] [92 117 48 48 49 51] [92 117 48 48 49 52] [92 117 48 48 49 53] [92 117 48 48 49 54] [92 117 48 48 49 55] [92 117 48 48 49 56] [92 117 48 48 49 57] [92 117 48 48 49 97] [92 117 48 48 49 98] [92 117 48 48 49 99] [92 117 48 48 49 100] [92 117 48 48 49 101] [92 117 48 48 49 102] [92 117 48 48 50 48] [92 117 48 48 50 49] [92 117 48 48 50 50] [92 117 48 48 50 51] [92 117 48 48 50 52] [92 117 48 48 50 53] [92 117 48 48 50 54] [92 117 48 48 50 55] [92 117 48 48 50 56] [92 117 48 48 50 57] [92 117 48 48 50 97] [92 117 48 48 50 98] [92 117 48 48 50 99] [92 117 48 48 50 100] [92 117 48 48 50 101] [92 117 48 48 50 102] [92 117 48 48 51 48] [92 117 48 48 51 49] [92 117 48 48 51 50] [92 117 48 48 51 51] [92 117 48 48 51 52] [92 117 48 48 51 53] [92 117 48 48 51 54] [92 117 48 48 51 55] [92 117 48 48 51 56] [92 117 48 48 51 57] [92 117 48 48 51 97] [92 117 48 48 51 98] [92 117 48 48 51 99] [92 117 48 48 51 100] [92 117 48 48 51 101] [92 117 48 48 51 102] [92 117 48 48 52 48] [92 117 48 48 52 49] [92 117 48 48 52 50] [92 117 48 48 52 51] [92 117 48 48 52 52] [92 117 48 48 52 53] [92 117 48 48 52 54] [92 117 48 48 52 55] [92 117 48 48 52 56] [92 117 48 48 52 57] [92 117 48 48 52 97] [92 117 48 48 52 98] [92 117 48 48 52 99] [92 117 48 48 52 100] [92 117 48 48 52 101] [92 117 48 48 52 102] [92 117 48 48 53 48] [92 117 48 48 53 49] [92 117 48 48 53 50] [92 117 48 48 53 51] [92 117 48 48 53 52] [92 117 48 48 53 53] [92 117 48 48 53 54] [92 117 48 48 53 55] [92 117 48 48 53 56] [92 117 48 48 53 57] [92 117 48 48 53 97] [92 117 48 48 53 98] [92 117 48 48 53 99] [92 117 48 48 53 100] [92 117 48 48 53 101] [92 117 48 48 53 102] [92 117 48 48 54 48] [92 117 48 48 54 49] [92 117 48 48 54 50] [92 117 48 48 54 51] [92 117 48 48 54 52] [92 117 48 48 54 53] [92 117 48 48 54 54] [92 117 48 48 54 55] [92 117 48 48 54 56] [92 117 48 48 54 57] [92 117 48 48 54 97] [92 117 48 48 54 98] [92 117 48 48 54 99] [92 117 48 48 54 100] [92 117 48 48 54 101] [92 117 48 48 54 102] [92 117 48 48 55 48] [92 117 48 48 55 49] [92 117 48 48 55 50] [92 117 48 48 55 51] [92 117 48 48 55 52] [92 117 48 48 55 53] [92 117 48 48 55 54] [92 117 48 48 55 55] [92 117 48 48 55 56] [92 117 48 48 55 57] [92 117 48 48 55 97] [92 117 48 48 55 98] [92 117 48 48 55 99] [92 117 48 48 55 100] [92 117 48 48 55 101] [92 117 48 48 55 102] [92 117 48 48 56 48] [92 117 48 48 56 49] [92 117 48 48 56 50] [92 117 48 48 56 51] [92 117 48 48 56 52] [92 117 48 48 56 53] [92 117 48 48 56 54] [92 117 48 48 56 55] [92 117 48 48 56 56] [92 117 48 48 56 57] [92 117 48 48 56 97] [92 117 48 48 56 98] [92 117 48 48 56 99] [92 117 48 48 56 100] [92 117 48 48 56 101] [92 117 48 48 56 102] [92 117 48 48 57 48] [92 117 48 48 57 49] [92 117 48 48 57 50] [92 117 48 48 57 51] [92 117 48 48 57 52] [92 117 48 48 57 53] [92 117 48 48 57 54] [92 117 48 48 57 55] [92 117 48 48 57 56] [92 117 48 48 57 57] [92 117 48 48 57 97] [92 117 48 48 57 98] [92 117 48 48 57 99] [92 117 48 48 57 100] [92 117 48 48 57 101] [92 117 48 48 57 102] [92 117 48 48 97 48] [92 117 48 48 97 49] [92 117 48 48 97 50] [92 117 48 48 97 51] [92 117 48 48 97 52] [92 117 48 48 97 53] [92 117 48 48 97 54] [92 117 48 48 97 55] [92 117 48 48 97 56] [92 117 48 48 97 57] [92 117 48 48 97 97] [92 117 48 48 97 98] [92 117 48 48 97 99] [92 117 48 48 97 100] [92 117 48 48 97 101] [92 117 48 48 97 102] [92 117 48 48 98 48] [92 117 48 48 98 49] [92 117 48 48 98 50] [92 117 48 48 98 51] [92 117 48 48 98 52] [92 117 48 48 98 53] [92 117 48 48 98 54] [92 117 48 48 98 55] [92 117 48 48 98 56] [92 117 48 48 98 57] [92 117 48 48 98 97] [92 117 48 48 98 98] [92 117 48 48 98 99] [92 117 48 48 98 100] [92 117 48 48 98 101] [92 117 48 48 98 102] [92 117 48 48 99 48] [92 117 48 48 99 49] [92 117 48 48 99 50] [92 117 48 48 99 51] [92 117 48 48 99 52] [92 117 48 48 99 53] [92 117 48 48 99 54] [92 117 48 48 99 55] [92 117 48 48 99 56] [92 117 48 48 99 57] [92 117 48 48 99 97] [92 117 48 48 99 98] [92 117 48 48 99 99] [92 117 48 48 99 100] [92 117 48 48 99 101] [92 117 48 48 99 102] [92 117 48 48 100 48] [92 117 48 48 100 49] [92 117 48 48 100 50] [92 117 48 48 100 51] [92 117 48 48 100 52] [92 117 48 48 100 53] [92 117 48 48 100 54] [92 117 48 48 100 55] [92 117 48 48 100 56] [92 117 48 48 100 57] [92 117 48 48 100 97] [92 117 48 48 100 98] [92 117 48 48 100 99] [92 117 48 48 100 100] [92 117 48 48 100 101] [92 117 48 48 100 102] [92 117 48 48 101 48] [92 117 48 48 101 49] [92 117 48 48 101 50] [92 117 48 48 101 51] [92 117 48 48 101 52] [92 117 48 48 101 53] [92 117 48 48 101 54] [92 117 48 48 101 55] [92 117 48 48 101 56] [92 117 48 48 101 57] [92 117 48 48 101 97] [92 117 48 48 101 98] [92 117 48 48 101 99] [92 117 48 48 101 100] [92 117 48 48 101 101] [92 117 48 48 101 102] [92 117 48 48 102 48] [92 117 48 48 102 49] [92 117 48 48 102 50] [92 117 48 48 102 51] [92 117 48 48 102 52] [92 117 48 48 102 53] [92 117 48 48 102 54] [92 117 48 48 102 55] [92 117 48 48 102 56] [92 117 48 48 102 57] [92 117 48 48 102 97] [92 117 48 48 102 98] [92 117 48 48 102 99] [92 117 48 48 102 100] [92 117 48 48 102 101] [92 117 48 48 102 102]]}
var jsonUnicodeEscapeChar [][]byte = [][]byte{
    {92, 117, 48, 48, 48, 48, },
    {92, 117, 48, 48, 48, 49, },
    {92, 117, 48, 48, 48, 50, },
    {92, 117, 48, 48, 48, 51, },
    {92, 117, 48, 48, 48, 52, },
    {92, 117, 48, 48, 48, 53, },
    {92, 117, 48, 48, 48, 54, },
    {92, 117, 48, 48, 48, 55, },
    {92, 117, 48, 48, 48, 56, },
    {92, 117, 48, 48, 48, 57, },
    {92, 117, 48, 48, 48, 97, },
    {92, 117, 48, 48, 48, 98, },
    {92, 117, 48, 48, 48, 99, },
    {92, 117, 48, 48, 48, 100, },
    {92, 117, 48, 48, 48, 101, },
    {92, 117, 48, 48, 48, 102, },
    {92, 117, 48, 48, 49, 48, },
    {92, 117, 48, 48, 49, 49, },
    {92, 117, 48, 48, 49, 50, },
    {92, 117, 48, 48, 49, 51, },
    {92, 117, 48, 48, 49, 52, },
    {92, 117, 48, 48, 49, 53, },
    {92, 117, 48, 48, 49, 54, },
    {92, 117, 48, 48, 49, 55, },
    {92, 117, 48, 48, 49, 56, },
    {92, 117, 48, 48, 49, 57, },
    {92, 117, 48, 48, 49, 97, },
    {92, 117, 48, 48, 49, 98, },
    {92, 117, 48, 48, 49, 99, },
    {92, 117, 48, 48, 49, 100, },
    {92, 117, 48, 48, 49, 101, },
    {92, 117, 48, 48, 49, 102, },
    {92, 117, 48, 48, 50, 48, },
    {92, 117, 48, 48, 50, 49, },
    {92, 117, 48, 48, 50, 50, },
    {92, 117, 48, 48, 50, 51, },
    {92, 117, 48, 48, 50, 52, },
    {92, 117, 48, 48, 50, 53, },
    {92, 117, 48, 48, 50, 54, },
    {92, 117, 48, 48, 50, 55, },
    {92, 117, 48, 48, 50, 56, },
    {92, 117, 48, 48, 50, 57, },
    {92, 117, 48, 48, 50, 97, },
    {92, 117, 48, 48, 50, 98, },
    {92, 117, 48, 48, 50, 99, },
    {92, 117, 48, 48, 50, 100, },
    {92, 117, 48, 48, 50, 101, },
    {92, 117, 48, 48, 50, 102, },
    {92, 117, 48, 48, 51, 48, },
    {92, 117, 48, 48, 51, 49, },
    {92, 117, 48, 48, 51, 50, },
    {92, 117, 48, 48, 51, 51, },
    {92, 117, 48, 48, 51, 52, },
    {92, 117, 48, 48, 51, 53, },
    {92, 117, 48, 48, 51, 54, },
    {92, 117, 48, 48, 51, 55, },
    {92, 117, 48, 48, 51, 56, },
    {92, 117, 48, 48, 51, 57, },
    {92, 117, 48, 48, 51, 97, },
    {92, 117, 48, 48, 51, 98, },
    {92, 117, 48, 48, 51, 99, },
    {92, 117, 48, 48, 51, 100, },
    {92, 117, 48, 48, 51, 101, },
    {92, 117, 48, 48, 51, 102, },
    {92, 117, 48, 48, 52, 48, },
    {92, 117, 48, 48, 52, 49, },
    {92, 117, 48, 48, 52, 50, },
    {92, 117, 48, 48, 52, 51, },
    {92, 117, 48, 48, 52, 52, },
    {92, 117, 48, 48, 52, 53, },
    {92, 117, 48, 48, 52, 54, },
    {92, 117, 48, 48, 52, 55, },
    {92, 117, 48, 48, 52, 56, },
    {92, 117, 48, 48, 52, 57, },
    {92, 117, 48, 48, 52, 97, },
    {92, 117, 48, 48, 52, 98, },
    {92, 117, 48, 48, 52, 99, },
    {92, 117, 48, 48, 52, 100, },
    {92, 117, 48, 48, 52, 101, },
    {92, 117, 48, 48, 52, 102, },
    {92, 117, 48, 48, 53, 48, },
    {92, 117, 48, 48, 53, 49, },
    {92, 117, 48, 48, 53, 50, },
    {92, 117, 48, 48, 53, 51, },
    {92, 117, 48, 48, 53, 52, },
    {92, 117, 48, 48, 53, 53, },
    {92, 117, 48, 48, 53, 54, },
    {92, 117, 48, 48, 53, 55, },
    {92, 117, 48, 48, 53, 56, },
    {92, 117, 48, 48, 53, 57, },
    {92, 117, 48, 48, 53, 97, },
    {92, 117, 48, 48, 53, 98, },
    {92, 117, 48, 48, 53, 99, },
    {92, 117, 48, 48, 53, 100, },
    {92, 117, 48, 48, 53, 101, },
    {92, 117, 48, 48, 53, 102, },
    {92, 117, 48, 48, 54, 48, },
    {92, 117, 48, 48, 54, 49, },
    {92, 117, 48, 48, 54, 50, },
    {92, 117, 48, 48, 54, 51, },
    {92, 117, 48, 48, 54, 52, },
    {92, 117, 48, 48, 54, 53, },
    {92, 117, 48, 48, 54, 54, },
    {92, 117, 48, 48, 54, 55, },
    {92, 117, 48, 48, 54, 56, },
    {92, 117, 48, 48, 54, 57, },
    {92, 117, 48, 48, 54, 97, },
    {92, 117, 48, 48, 54, 98, },
    {92, 117, 48, 48, 54, 99, },
    {92, 117, 48, 48, 54, 100, },
    {92, 117, 48, 48, 54, 101, },
    {92, 117, 48, 48, 54, 102, },
    {92, 117, 48, 48, 55, 48, },
    {92, 117, 48, 48, 55, 49, },
    {92, 117, 48, 48, 55, 50, },
    {92, 117, 48, 48, 55, 51, },
    {92, 117, 48, 48, 55, 52, },
    {92, 117, 48, 48, 55, 53, },
    {92, 117, 48, 48, 55, 54, },
    {92, 117, 48, 48, 55, 55, },
    {92, 117, 48, 48, 55, 56, },
    {92, 117, 48, 48, 55, 57, },
    {92, 117, 48, 48, 55, 97, },
    {92, 117, 48, 48, 55, 98, },
    {92, 117, 48, 48, 55, 99, },
    {92, 117, 48, 48, 55, 100, },
    {92, 117, 48, 48, 55, 101, },
    {92, 117, 48, 48, 55, 102, },
    {92, 117, 48, 48, 56, 48, },
    {92, 117, 48, 48, 56, 49, },
    {92, 117, 48, 48, 56, 50, },
    {92, 117, 48, 48, 56, 51, },
    {92, 117, 48, 48, 56, 52, },
    {92, 117, 48, 48, 56, 53, },
    {92, 117, 48, 48, 56, 54, },
    {92, 117, 48, 48, 56, 55, },
    {92, 117, 48, 48, 56, 56, },
    {92, 117, 48, 48, 56, 57, },
    {92, 117, 48, 48, 56, 97, },
    {92, 117, 48, 48, 56, 98, },
    {92, 117, 48, 48, 56, 99, },
    {92, 117, 48, 48, 56, 100, },
    {92, 117, 48, 48, 56, 101, },
    {92, 117, 48, 48, 56, 102, },
    {92, 117, 48, 48, 57, 48, },
    {92, 117, 48, 48, 57, 49, },
    {92, 117, 48, 48, 57, 50, },
    {92, 117, 48, 48, 57, 51, },
    {92, 117, 48, 48, 57, 52, },
    {92, 117, 48, 48, 57, 53, },
    {92, 117, 48, 48, 57, 54, },
    {92, 117, 48, 48, 57, 55, },
    {92, 117, 48, 48, 57, 56, },
    {92, 117, 48, 48, 57, 57, },
    {92, 117, 48, 48, 57, 97, },
    {92, 117, 48, 48, 57, 98, },
    {92, 117, 48, 48, 57, 99, },
    {92, 117, 48, 48, 57, 100, },
    {92, 117, 48, 48, 57, 101, },
    {92, 117, 48, 48, 57, 102, },
    {92, 117, 48, 48, 97, 48, },
    {92, 117, 48, 48, 97, 49, },
    {92, 117, 48, 48, 97, 50, },
    {92, 117, 48, 48, 97, 51, },
    {92, 117, 48, 48, 97, 52, },
    {92, 117, 48, 48, 97, 53, },
    {92, 117, 48, 48, 97, 54, },
    {92, 117, 48, 48, 97, 55, },
    {92, 117, 48, 48, 97, 56, },
    {92, 117, 48, 48, 97, 57, },
    {92, 117, 48, 48, 97, 97, },
    {92, 117, 48, 48, 97, 98, },
    {92, 117, 48, 48, 97, 99, },
    {92, 117, 48, 48, 97, 100, },
    {92, 117, 48, 48, 97, 101, },
    {92, 117, 48, 48, 97, 102, },
    {92, 117, 48, 48, 98, 48, },
    {92, 117, 48, 48, 98, 49, },
    {92, 117, 48, 48, 98, 50, },
    {92, 117, 48, 48, 98, 51, },
    {92, 117, 48, 48, 98, 52, },
    {92, 117, 48, 48, 98, 53, },
    {92, 117, 48, 48, 98, 54, },
    {92, 117, 48, 48, 98, 55, },
    {92, 117, 48, 48, 98, 56, },
    {92, 117, 48, 48, 98, 57, },
    {92, 117, 48, 48, 98, 97, },
    {92, 117, 48, 48, 98, 98, },
    {92, 117, 48, 48, 98, 99, },
    {92, 117, 48, 48, 98, 100, },
    {92, 117, 48, 48, 98, 101, },
    {92, 117, 48, 48, 98, 102, },
    {92, 117, 48, 48, 99, 48, },
    {92, 117, 48, 48, 99, 49, },
    {92, 117, 48, 48, 99, 50, },
    {92, 117, 48, 48, 99, 51, },
    {92, 117, 48, 48, 99, 52, },
    {92, 117, 48, 48, 99, 53, },
    {92, 117, 48, 48, 99, 54, },
    {92, 117, 48, 48, 99, 55, },
    {92, 117, 48, 48, 99, 56, },
    {92, 117, 48, 48, 99, 57, },
    {92, 117, 48, 48, 99, 97, },
    {92, 117, 48, 48, 99, 98, },
    {92, 117, 48, 48, 99, 99, },
    {92, 117, 48, 48, 99, 100, },
    {92, 117, 48, 48, 99, 101, },
    {92, 117, 48, 48, 99, 102, },
    {92, 117, 48, 48, 100, 48, },
    {92, 117, 48, 48, 100, 49, },
    {92, 117, 48, 48, 100, 50, },
    {92, 117, 48, 48, 100, 51, },
    {92, 117, 48, 48, 100, 52, },
    {92, 117, 48, 48, 100, 53, },
    {92, 117, 48, 48, 100, 54, },
    {92, 117, 48, 48, 100, 55, },
    {92, 117, 48, 48, 100, 56, },
    {92, 117, 48, 48, 100, 57, },
    {92, 117, 48, 48, 100, 97, },
    {92, 117, 48, 48, 100, 98, },
    {92, 117, 48, 48, 100, 99, },
    {92, 117, 48, 48, 100, 100, },
    {92, 117, 48, 48, 100, 101, },
    {92, 117, 48, 48, 100, 102, },
    {92, 117, 48, 48, 101, 48, },
    {92, 117, 48, 48, 101, 49, },
    {92, 117, 48, 48, 101, 50, },
    {92, 117, 48, 48, 101, 51, },
    {92, 117, 48, 48, 101, 52, },
    {92, 117, 48, 48, 101, 53, },
    {92, 117, 48, 48, 101, 54, },
    {92, 117, 48, 48, 101, 55, },
    {92, 117, 48, 48, 101, 56, },
    {92, 117, 48, 48, 101, 57, },
    {92, 117, 48, 48, 101, 97, },
    {92, 117, 48, 48, 101, 98, },
    {92, 117, 48, 48, 101, 99, },
    {92, 117, 48, 48, 101, 100, },
    {92, 117, 48, 48, 101, 101, },
    {92, 117, 48, 48, 101, 102, },
    {92, 117, 48, 48, 102, 48, },
    {92, 117, 48, 48, 102, 49, },
    {92, 117, 48, 48, 102, 50, },
    {92, 117, 48, 48, 102, 51, },
    {92, 117, 48, 48, 102, 52, },
    {92, 117, 48, 48, 102, 53, },
    {92, 117, 48, 48, 102, 54, },
    {92, 117, 48, 48, 102, 55, },
    {92, 117, 48, 48, 102, 56, },
    {92, 117, 48, 48, 102, 57, },
    {92, 117, 48, 48, 102, 97, },
    {92, 117, 48, 48, 102, 98, },
    {92, 117, 48, 48, 102, 99, },
    {92, 117, 48, 48, 102, 100, },
    {92, 117, 48, 48, 102, 101, },
    {92, 117, 48, 48, 102, 102, },
}

